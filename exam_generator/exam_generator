#!/usr/bin/python3
"""
generates unique exam for each student out of the full 
set of possible questions

Question input file is expected with the following format:
(created by plain text export from source google document)

#1 Lesson name
1. First question
   * answer (will be ignored)
2. Second question
   * second answer
#2 Second lesson
...
"""

import re
import sys
import copy
import pprint
import random
import argparse

questions_per_lesson = 2

parser = argparse.ArgumentParser()
parser.add_argument("--students","-s",action="append", required=True,
        help="File containing list of students, one per line")
parser.add_argument("--questions", "-q", action="append", required=True,
        help="File with questions")
parser.add_argument("--rejections", "-r", action="append", required=False,
        help="File with rejected combinations of questions")
options = parser.parse_args()

if not options.students:
    parser.print_help()
    print("students parametr not set")
    sys.exit(1)
if not options.questions:
    parser.print_help()
    print("questions parametr not set")
    sys.exit(1)

#
# read all inputs
#
students = []
with open(options.students[0]) as f:
    students = [x.strip() for x in f.readlines()]
print(students)

"""
questions[lesson_number] = { "name":"lesson_name",
                             "questions" :
                                ["question1", question2",...]
                           }
"""
questions = {}
with open(options.questions[0]) as f:
    lesson = ""
    lesson_number = 0
    question = ""
    question_number = 0
    # are we inside a multi-line question?
    in_question = False
    for line in [x.lstrip() for x in f.readlines()]:
        # new lesson section
        if line.startswith('#'):
            lesson_number = int(line.split()[0][1:])
            lesson_name = line.split(" ", 1)[1].strip()
            print("Found lesson #{} named {}".format(
                lesson_number, lesson_name))
            questions[lesson_number] = {}
            questions[lesson_number]["name"] = lesson_name.strip()
            questions[lesson_number]["questions"] = []
            if in_question:
                in_question = False
                questions[lesson_number]["questions"].append(question.rstrip())
                question = ""
            continue
        # new question
        match = re.match(r"([0-9]+)\. (.*)", line)
        if match:
            if in_question:
                in_question = False
                questions[lesson_number]["questions"].append(question.rstrip())
                question = ""
            in_question = True
            question_number = int(match.group(1))
            question += match.group(2)
            print("Question starts: #{}".format(question_number))
            continue
        # answer - skip it
        match = re.match(r" *\* .*", line)
        if match:
            if in_question:
                in_question = False
                questions[lesson_number]["questions"].append(question.rstrip())
                question = ""
            continue
        # anything else = multiline question
        if in_question:
            question += '\n'+line.rstrip()
print("Found following questions:")
pprint.pprint(questions)

# read reject dictionary
rejections = {}
if options.rejections:
    with open(options.rejections[0]) as f:
        for line in f.readlines():
            if line.strip() and line[0] != '#':
                (section, question1, question2) = line.split(',', 2)
                pair = (int(question1), int(question2))
                if int(section) in rejections:
                    rejections[int(section)].append(pair)
                else:
                    rejections[int(section)] = [pair]
print("Have following rejections definied")
print(rejections)

# Generate exams
#

# to make sure each question is equally represented in the results
# we'll create a copy of questions and each time we use one question,
# we remove it from list. Refill the list from the original if empty
# and still in need of questions


def good_selection(tested_list, reject_list):
    if len(set(tested_list)) < len(tested_list):  # not unique values
        return False
    for subset in reject_list:  # test each itemset in reject list
        if len(set(tested_list).intersection(set(subset))) > 1:
            return False
    return True


question_id_pool = {}

for student in students:
    print("Generating {}.txt".format(student))
    f = open("./{}.txt".format(student), "w")
    for lesson_number in questions:
        print("  Lesson #{} - {}".format(
            lesson_number, questions[lesson_number]["name"]))
        # two questions from each lesson
        if lesson_number not in question_id_pool:
            question_id_pool[lesson_number] = []
        if len(question_id_pool[lesson_number])<questions_per_lesson:  # pool is almost empty, add randomized question indexes, 3 is magic contstant
            while 1:
                new_id_pool = list(range(1, 1+len(questions[lesson_number]["questions"])))
                random.shuffle(new_id_pool)
                test_pool = question_id_pool[lesson_number][:]+new_id_pool
                good = True
                i = 0
                while i < len(test_pool):
                    good = good and good_selection(test_pool[i:i+questions_per_lesson], rejections.get(lesson_number,[]))
                    i += questions_per_lesson
                if good:
                    break
            question_id_pool[lesson_number] = test_pool
        print("    Selected questions: %s" % str(question_id_pool[lesson_number][:questions_per_lesson]))
        for i in question_id_pool[lesson_number][:questions_per_lesson]:
            question = questions[lesson_number]["questions"][i-1]
            print("    Question: {}".format(question))
            f.write(question)
            f.write("\n\n")
        # truncate question_id_pool with selected questions
        question_id_pool[lesson_number] = question_id_pool[lesson_number][questions_per_lesson:]
    f.close()
